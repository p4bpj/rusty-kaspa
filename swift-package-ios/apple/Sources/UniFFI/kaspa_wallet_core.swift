// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(KaspaWalletCore)
import KaspaWalletCore
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_kaspa_wallet_core_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_kaspa_wallet_core_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




/**
 *
 * Represents a {@link UtxoContext} (account) balance.
 *
 * @see {@link IBalance}, {@link UtxoContext}
 *
 * @category Wallet SDK

 */
public protocol BalanceProtocol : AnyObject {
    
    /**
     * Confirmed amount of funds available for spending.
     */
    func mature()  -> UInt64
    
    /**
     * Amount of funds that are being send and are not yet accepted by the network.
     */
    func outgoing()  -> UInt64
    
    /**
     * Amount of funds that are being received and are not yet confirmed.
     */
    func pending()  -> UInt64
    
    func toBalanceStrings(networkType: NetworkType) throws  -> BalanceStrings
    
}

/**
 *
 * Represents a {@link UtxoContext} (account) balance.
 *
 * @see {@link IBalance}, {@link UtxoContext}
 *
 * @category Wallet SDK

 */
open class Balance:
    BalanceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_kaspa_wallet_core_fn_clone_balance(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_kaspa_wallet_core_fn_free_balance(pointer, $0) }
    }

    

    
    /**
     * Confirmed amount of funds available for spending.
     */
open func mature() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_method_balance_mature(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Amount of funds that are being send and are not yet accepted by the network.
     */
open func outgoing() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_method_balance_outgoing(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Amount of funds that are being received and are not yet confirmed.
     */
open func pending() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_method_balance_pending(self.uniffiClonePointer(),$0
    )
})
}
    
open func toBalanceStrings(networkType: NetworkType)throws  -> BalanceStrings {
    return try  FfiConverterTypeBalanceStrings.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_kaspa_wallet_core_fn_method_balance_to_balance_strings(self.uniffiClonePointer(),
        FfiConverterTypeNetworkType_lower(networkType),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBalance: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Balance

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Balance {
        return Balance(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Balance) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Balance {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Balance, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalance_lift(_ pointer: UnsafeMutableRawPointer) throws -> Balance {
    return try FfiConverterTypeBalance.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalance_lower(_ value: Balance) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBalance.lower(value)
}




/**
 *
 * Formatted string representation of the {@link Balance}.
 *
 * The value is formatted as `123,456.789`.
 *
 * @category Wallet SDK

 */
public protocol BalanceStringsProtocol : AnyObject {
    
    func mature()  -> String
    
    func pending()  -> String?
    
}

/**
 *
 * Formatted string representation of the {@link Balance}.
 *
 * The value is formatted as `123,456.789`.
 *
 * @category Wallet SDK

 */
open class BalanceStrings:
    BalanceStringsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_kaspa_wallet_core_fn_clone_balancestrings(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_kaspa_wallet_core_fn_free_balancestrings(pointer, $0) }
    }

    

    
open func mature() -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_method_balancestrings_mature(self.uniffiClonePointer(),$0
    )
})
}
    
open func pending() -> String? {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_method_balancestrings_pending(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBalanceStrings: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BalanceStrings

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BalanceStrings {
        return BalanceStrings(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BalanceStrings) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BalanceStrings {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BalanceStrings, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalanceStrings_lift(_ pointer: UnsafeMutableRawPointer) throws -> BalanceStrings {
    return try FfiConverterTypeBalanceStrings.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalanceStrings_lower(_ value: BalanceStrings) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBalanceStrings.lower(value)
}




public protocol SignMessageOptionsProtocol : AnyObject {
    
}

open class SignMessageOptions:
    SignMessageOptionsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_kaspa_wallet_core_fn_clone_signmessageoptions(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_kaspa_wallet_core_fn_free_signmessageoptions(pointer, $0) }
    }

    

    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignMessageOptions: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SignMessageOptions

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SignMessageOptions {
        return SignMessageOptions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SignMessageOptions) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignMessageOptions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SignMessageOptions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignMessageOptions_lift(_ pointer: UnsafeMutableRawPointer) throws -> SignMessageOptions {
    return try FfiConverterTypeSignMessageOptions.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignMessageOptions_lower(_ value: SignMessageOptions) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSignMessageOptions.lower(value)
}


/**
 * [`Error`](enum@Error) variants emitted by the wallet framework.
 */
public enum Error {

    
    
    case Custom(message: String)
    
    case WalletKeys(message: String)
    
    case AccountSelection(message: String)
    
    case KaspaRpcClientResult(message: String)
    
    case RpcError(message: String)
    
    case KaspaWorkflowRpcError(message: String)
    
    case NotWrpcClient(message: String)
    
    case Bip32Error(message: String)
    
    case Decode(message: String)
    
    case PoisonError(message: String)
    
    case Secp256k1Error(message: String)
    
    case CoreSignError(message: String)
    
    case SerdeJson(message: String)
    
    case NoWalletInStorage(message: String)
    
    case WalletAlreadyExists(message: String)
    
    case WalletNameNotAllowed(message: String)
    
    case WalletNotOpen(message: String)
    
    case NotConnected(message: String)
    
    case MissingNetworkId(message: String)
    
    case RpcApiVersion(message: String)
    
    case InvalidNetworkId(message: String)
    
    case InvalidNetworkType(message: String)
    
    case InvalidNetworkSuffix(message: String)
    
    case MissingNetworkSuffix(message: String)
    
    case UnexpectedExtraSuffixToken(message: String)
    
    case NetworkTypeConnected(message: String)
    
    case NetworkType(message: String)
    
    case NetworkId(message: String)
    
    case MissingUtxoIndex(message: String)
    
    case InvalidFilename(message: String)
    
    case Io(message: String)
    
    case JsValue(message: String)
    
    case DecodeError(message: String)
    
    case WorkflowWasm(message: String)
    
    case WorkflowStore(message: String)
    
    case Address(message: String)
    
    case SerdeWasmBindgen(message: String)
    
    case FasterHexError(message: String)
    
    case ParseFloatError(message: String)
    
    case Chacha20poly1305(message: String)
    
    case WalletDecrypt(message: String)
    
    case FromUtf8Error(message: String)
    
    case ScriptBuilderError(message: String)
    
    case Argon2(message: String)
    
    case Argon2ph(message: String)
    
    case VarError(message: String)
    
    case PrivateKeyNotFound(message: String)
    
    case PrivateKeyAlreadyExists(message: String)
    
    case AccountAlreadyExists(message: String)
    
    case XPrvSupport(message: String)
    
    case KeyId(message: String)
    
    case WalletSecretRequired(message: String)
    
    case SecretIsEmpty(message: String)
    
    case Aborted(message: String)
    
    case TryFromEnum(message: String)
    
    case AccountFactoryNotFound(message: String)
    
    case AccountNotFound(message: String)
    
    case AccountNotActive(message: String)
    
    case InvalidAccountId(message: String)
    
    case InvalidKeyDataId(message: String)
    
    case InvalidAccountKind(message: String)
    
    case InsufficientFunds(message: String)
    
    case Utf8Error(message: String)
    
    case ParseIntError(message: String)
    
    case DuplicateUtxoEntry(message: String)
    
    case ToValue(message: String)
    
    case NoRecordsFound(message: String)
    
    case NotImplemented(message: String)
    
    case ResidentWallet(message: String)
    
    case ResidentAccount(message: String)
    
    case Bip32WatchAccount(message: String)
    
    case Bip32WatchXpubRequired(message: String)
    
    case AccountKindFeature(message: String)
    
    case AccountAddressDerivationCaps(message: String)
    
    case DowncastError(message: String)
    
    case ConsensusClient(message: String)
    
    case ConsensusWasm(message: String)
    
    case GeneratorFeesInSweepTransaction(message: String)
    
    case GeneratorNoFeesForFinalTransaction(message: String)
    
    case GeneratorChangeAddressNetworkTypeMismatch(message: String)
    
    case GeneratorPaymentOutputNetworkTypeMismatch(message: String)
    
    case GeneratorPaymentOutputZeroAmount(message: String)
    
    case GeneratorIncludeFeesRequiresOneOutput(message: String)
    
    case GeneratorTransactionOutputsAreTooHeavy(message: String)
    
    case GeneratorTransactionIsTooHeavy(message: String)
    
    case StorageMassExceedsMaximumTransactionMass(message: String)
    
    case InvalidRange(message: String)
    
    case MultisigCreateError(message: String)
    
    case TxScriptError(message: String)
    
    case LegacyAccountNotInitialized(message: String)
    
    case AssocPrvKeyDataIds(message: String)
    
    case AssocPrvKeyDataIdsEmpty(message: String)
    
    case InvalidExtendedPublicKey(message: String)
    
    case MissingDaaScore(message: String)
    
    case ListenerId(message: String)
    
    case MassCalculationError(message: String)
    
    case InvalidArgument(message: String)
    
    case BigInt(message: String)
    
    case InvalidMnemonicPhrase(message: String)
    
    case InvalidTransactionKind(message: String)
    
    case CipherMessageTooShort(message: String)
    
    case InvalidPrivateKeyLength(message: String)
    
    case InvalidPublicKeyLength(message: String)
    
    case Metrics(message: String)
    
    case NotSynced(message: String)
    
    case Pskt(message: String)
    
    case PendingTransactionFromPsktError(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeError: FfiConverterRustBuffer {
    typealias SwiftType = Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Custom(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .WalletKeys(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .AccountSelection(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .KaspaRpcClientResult(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .RpcError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .KaspaWorkflowRpcError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .NotWrpcClient(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .Bip32Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .Decode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .PoisonError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .Secp256k1Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .CoreSignError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .SerdeJson(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .NoWalletInStorage(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .WalletAlreadyExists(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .WalletNameNotAllowed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .WalletNotOpen(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .NotConnected(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 19: return .MissingNetworkId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 20: return .RpcApiVersion(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 21: return .InvalidNetworkId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 22: return .InvalidNetworkType(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 23: return .InvalidNetworkSuffix(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 24: return .MissingNetworkSuffix(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 25: return .UnexpectedExtraSuffixToken(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 26: return .NetworkTypeConnected(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 27: return .NetworkType(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 28: return .NetworkId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 29: return .MissingUtxoIndex(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 30: return .InvalidFilename(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 31: return .Io(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 32: return .JsValue(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 33: return .DecodeError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 34: return .WorkflowWasm(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 35: return .WorkflowStore(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 36: return .Address(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 37: return .SerdeWasmBindgen(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 38: return .FasterHexError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 39: return .ParseFloatError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 40: return .Chacha20poly1305(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 41: return .WalletDecrypt(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 42: return .FromUtf8Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 43: return .ScriptBuilderError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 44: return .Argon2(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 45: return .Argon2ph(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 46: return .VarError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 47: return .PrivateKeyNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 48: return .PrivateKeyAlreadyExists(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 49: return .AccountAlreadyExists(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 50: return .XPrvSupport(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 51: return .KeyId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 52: return .WalletSecretRequired(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 53: return .SecretIsEmpty(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 54: return .Aborted(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 55: return .TryFromEnum(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 56: return .AccountFactoryNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 57: return .AccountNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 58: return .AccountNotActive(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 59: return .InvalidAccountId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 60: return .InvalidKeyDataId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 61: return .InvalidAccountKind(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 62: return .InsufficientFunds(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 63: return .Utf8Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 64: return .ParseIntError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 65: return .DuplicateUtxoEntry(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 66: return .ToValue(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 67: return .NoRecordsFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 68: return .NotImplemented(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 69: return .ResidentWallet(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 70: return .ResidentAccount(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 71: return .Bip32WatchAccount(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 72: return .Bip32WatchXpubRequired(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 73: return .AccountKindFeature(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 74: return .AccountAddressDerivationCaps(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 75: return .DowncastError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 76: return .ConsensusClient(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 77: return .ConsensusWasm(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 78: return .GeneratorFeesInSweepTransaction(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 79: return .GeneratorNoFeesForFinalTransaction(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 80: return .GeneratorChangeAddressNetworkTypeMismatch(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 81: return .GeneratorPaymentOutputNetworkTypeMismatch(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 82: return .GeneratorPaymentOutputZeroAmount(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 83: return .GeneratorIncludeFeesRequiresOneOutput(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 84: return .GeneratorTransactionOutputsAreTooHeavy(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 85: return .GeneratorTransactionIsTooHeavy(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 86: return .StorageMassExceedsMaximumTransactionMass(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 87: return .InvalidRange(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 88: return .MultisigCreateError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 89: return .TxScriptError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 90: return .LegacyAccountNotInitialized(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 91: return .AssocPrvKeyDataIds(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 92: return .AssocPrvKeyDataIdsEmpty(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 93: return .InvalidExtendedPublicKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 94: return .MissingDaaScore(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 95: return .ListenerId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 96: return .MassCalculationError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 97: return .InvalidArgument(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 98: return .BigInt(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 99: return .InvalidMnemonicPhrase(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 100: return .InvalidTransactionKind(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 101: return .CipherMessageTooShort(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 102: return .InvalidPrivateKeyLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 103: return .InvalidPublicKeyLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 104: return .Metrics(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 105: return .NotSynced(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 106: return .Pskt(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 107: return .PendingTransactionFromPsktError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Error, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Custom(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .WalletKeys(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .AccountSelection(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .KaspaRpcClientResult(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .RpcError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .KaspaWorkflowRpcError(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .NotWrpcClient(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .Bip32Error(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .Decode(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .PoisonError(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .Secp256k1Error(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .CoreSignError(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .SerdeJson(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .NoWalletInStorage(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))
        case .WalletAlreadyExists(_ /* message is ignored*/):
            writeInt(&buf, Int32(15))
        case .WalletNameNotAllowed(_ /* message is ignored*/):
            writeInt(&buf, Int32(16))
        case .WalletNotOpen(_ /* message is ignored*/):
            writeInt(&buf, Int32(17))
        case .NotConnected(_ /* message is ignored*/):
            writeInt(&buf, Int32(18))
        case .MissingNetworkId(_ /* message is ignored*/):
            writeInt(&buf, Int32(19))
        case .RpcApiVersion(_ /* message is ignored*/):
            writeInt(&buf, Int32(20))
        case .InvalidNetworkId(_ /* message is ignored*/):
            writeInt(&buf, Int32(21))
        case .InvalidNetworkType(_ /* message is ignored*/):
            writeInt(&buf, Int32(22))
        case .InvalidNetworkSuffix(_ /* message is ignored*/):
            writeInt(&buf, Int32(23))
        case .MissingNetworkSuffix(_ /* message is ignored*/):
            writeInt(&buf, Int32(24))
        case .UnexpectedExtraSuffixToken(_ /* message is ignored*/):
            writeInt(&buf, Int32(25))
        case .NetworkTypeConnected(_ /* message is ignored*/):
            writeInt(&buf, Int32(26))
        case .NetworkType(_ /* message is ignored*/):
            writeInt(&buf, Int32(27))
        case .NetworkId(_ /* message is ignored*/):
            writeInt(&buf, Int32(28))
        case .MissingUtxoIndex(_ /* message is ignored*/):
            writeInt(&buf, Int32(29))
        case .InvalidFilename(_ /* message is ignored*/):
            writeInt(&buf, Int32(30))
        case .Io(_ /* message is ignored*/):
            writeInt(&buf, Int32(31))
        case .JsValue(_ /* message is ignored*/):
            writeInt(&buf, Int32(32))
        case .DecodeError(_ /* message is ignored*/):
            writeInt(&buf, Int32(33))
        case .WorkflowWasm(_ /* message is ignored*/):
            writeInt(&buf, Int32(34))
        case .WorkflowStore(_ /* message is ignored*/):
            writeInt(&buf, Int32(35))
        case .Address(_ /* message is ignored*/):
            writeInt(&buf, Int32(36))
        case .SerdeWasmBindgen(_ /* message is ignored*/):
            writeInt(&buf, Int32(37))
        case .FasterHexError(_ /* message is ignored*/):
            writeInt(&buf, Int32(38))
        case .ParseFloatError(_ /* message is ignored*/):
            writeInt(&buf, Int32(39))
        case .Chacha20poly1305(_ /* message is ignored*/):
            writeInt(&buf, Int32(40))
        case .WalletDecrypt(_ /* message is ignored*/):
            writeInt(&buf, Int32(41))
        case .FromUtf8Error(_ /* message is ignored*/):
            writeInt(&buf, Int32(42))
        case .ScriptBuilderError(_ /* message is ignored*/):
            writeInt(&buf, Int32(43))
        case .Argon2(_ /* message is ignored*/):
            writeInt(&buf, Int32(44))
        case .Argon2ph(_ /* message is ignored*/):
            writeInt(&buf, Int32(45))
        case .VarError(_ /* message is ignored*/):
            writeInt(&buf, Int32(46))
        case .PrivateKeyNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(47))
        case .PrivateKeyAlreadyExists(_ /* message is ignored*/):
            writeInt(&buf, Int32(48))
        case .AccountAlreadyExists(_ /* message is ignored*/):
            writeInt(&buf, Int32(49))
        case .XPrvSupport(_ /* message is ignored*/):
            writeInt(&buf, Int32(50))
        case .KeyId(_ /* message is ignored*/):
            writeInt(&buf, Int32(51))
        case .WalletSecretRequired(_ /* message is ignored*/):
            writeInt(&buf, Int32(52))
        case .SecretIsEmpty(_ /* message is ignored*/):
            writeInt(&buf, Int32(53))
        case .Aborted(_ /* message is ignored*/):
            writeInt(&buf, Int32(54))
        case .TryFromEnum(_ /* message is ignored*/):
            writeInt(&buf, Int32(55))
        case .AccountFactoryNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(56))
        case .AccountNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(57))
        case .AccountNotActive(_ /* message is ignored*/):
            writeInt(&buf, Int32(58))
        case .InvalidAccountId(_ /* message is ignored*/):
            writeInt(&buf, Int32(59))
        case .InvalidKeyDataId(_ /* message is ignored*/):
            writeInt(&buf, Int32(60))
        case .InvalidAccountKind(_ /* message is ignored*/):
            writeInt(&buf, Int32(61))
        case .InsufficientFunds(_ /* message is ignored*/):
            writeInt(&buf, Int32(62))
        case .Utf8Error(_ /* message is ignored*/):
            writeInt(&buf, Int32(63))
        case .ParseIntError(_ /* message is ignored*/):
            writeInt(&buf, Int32(64))
        case .DuplicateUtxoEntry(_ /* message is ignored*/):
            writeInt(&buf, Int32(65))
        case .ToValue(_ /* message is ignored*/):
            writeInt(&buf, Int32(66))
        case .NoRecordsFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(67))
        case .NotImplemented(_ /* message is ignored*/):
            writeInt(&buf, Int32(68))
        case .ResidentWallet(_ /* message is ignored*/):
            writeInt(&buf, Int32(69))
        case .ResidentAccount(_ /* message is ignored*/):
            writeInt(&buf, Int32(70))
        case .Bip32WatchAccount(_ /* message is ignored*/):
            writeInt(&buf, Int32(71))
        case .Bip32WatchXpubRequired(_ /* message is ignored*/):
            writeInt(&buf, Int32(72))
        case .AccountKindFeature(_ /* message is ignored*/):
            writeInt(&buf, Int32(73))
        case .AccountAddressDerivationCaps(_ /* message is ignored*/):
            writeInt(&buf, Int32(74))
        case .DowncastError(_ /* message is ignored*/):
            writeInt(&buf, Int32(75))
        case .ConsensusClient(_ /* message is ignored*/):
            writeInt(&buf, Int32(76))
        case .ConsensusWasm(_ /* message is ignored*/):
            writeInt(&buf, Int32(77))
        case .GeneratorFeesInSweepTransaction(_ /* message is ignored*/):
            writeInt(&buf, Int32(78))
        case .GeneratorNoFeesForFinalTransaction(_ /* message is ignored*/):
            writeInt(&buf, Int32(79))
        case .GeneratorChangeAddressNetworkTypeMismatch(_ /* message is ignored*/):
            writeInt(&buf, Int32(80))
        case .GeneratorPaymentOutputNetworkTypeMismatch(_ /* message is ignored*/):
            writeInt(&buf, Int32(81))
        case .GeneratorPaymentOutputZeroAmount(_ /* message is ignored*/):
            writeInt(&buf, Int32(82))
        case .GeneratorIncludeFeesRequiresOneOutput(_ /* message is ignored*/):
            writeInt(&buf, Int32(83))
        case .GeneratorTransactionOutputsAreTooHeavy(_ /* message is ignored*/):
            writeInt(&buf, Int32(84))
        case .GeneratorTransactionIsTooHeavy(_ /* message is ignored*/):
            writeInt(&buf, Int32(85))
        case .StorageMassExceedsMaximumTransactionMass(_ /* message is ignored*/):
            writeInt(&buf, Int32(86))
        case .InvalidRange(_ /* message is ignored*/):
            writeInt(&buf, Int32(87))
        case .MultisigCreateError(_ /* message is ignored*/):
            writeInt(&buf, Int32(88))
        case .TxScriptError(_ /* message is ignored*/):
            writeInt(&buf, Int32(89))
        case .LegacyAccountNotInitialized(_ /* message is ignored*/):
            writeInt(&buf, Int32(90))
        case .AssocPrvKeyDataIds(_ /* message is ignored*/):
            writeInt(&buf, Int32(91))
        case .AssocPrvKeyDataIdsEmpty(_ /* message is ignored*/):
            writeInt(&buf, Int32(92))
        case .InvalidExtendedPublicKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(93))
        case .MissingDaaScore(_ /* message is ignored*/):
            writeInt(&buf, Int32(94))
        case .ListenerId(_ /* message is ignored*/):
            writeInt(&buf, Int32(95))
        case .MassCalculationError(_ /* message is ignored*/):
            writeInt(&buf, Int32(96))
        case .InvalidArgument(_ /* message is ignored*/):
            writeInt(&buf, Int32(97))
        case .BigInt(_ /* message is ignored*/):
            writeInt(&buf, Int32(98))
        case .InvalidMnemonicPhrase(_ /* message is ignored*/):
            writeInt(&buf, Int32(99))
        case .InvalidTransactionKind(_ /* message is ignored*/):
            writeInt(&buf, Int32(100))
        case .CipherMessageTooShort(_ /* message is ignored*/):
            writeInt(&buf, Int32(101))
        case .InvalidPrivateKeyLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(102))
        case .InvalidPublicKeyLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(103))
        case .Metrics(_ /* message is ignored*/):
            writeInt(&buf, Int32(104))
        case .NotSynced(_ /* message is ignored*/):
            writeInt(&buf, Int32(105))
        case .Pskt(_ /* message is ignored*/):
            writeInt(&buf, Int32(106))
        case .PendingTransactionFromPsktError(_ /* message is ignored*/):
            writeInt(&buf, Int32(107))

        
        }
    }
}


extension Error: Equatable, Hashable {}

extension Error: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}




public func kaspaToSompi(kaspa: Double) -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_func_kaspa_to_sompi(
        FfiConverterDouble.lower(kaspa),$0
    )
})
}
/**
 * Produces `SHA256` hash of the given data.
 */
public func sha256Hash(data: Data) -> Secret {
    return try!  FfiConverterTypeSecret_lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_func_sha256_hash(
        FfiConverterData.lower(data),$0
    )
})
}
/**
 * Produces `SHA256d` hash of the given data.
 */
public func sha256dHash(data: Data) -> Secret {
    return try!  FfiConverterTypeSecret_lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_func_sha256d_hash(
        FfiConverterData.lower(data),$0
    )
})
}
public func signMessageString(msg: String, privkey: Data, options: SignMessageOptions)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_kaspa_wallet_core_fn_func_sign_message_string(
        FfiConverterString.lower(msg),
        FfiConverterData.lower(privkey),
        FfiConverterTypeSignMessageOptions.lower(options),$0
    )
})
}
public func sompiToKaspa(sompi: UInt64) -> Double {
    return try!  FfiConverterDouble.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_func_sompi_to_kaspa(
        FfiConverterUInt64.lower(sompi),$0
    )
})
}
public func sompiToKaspaString(sompi: UInt64) -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_func_sompi_to_kaspa_string(
        FfiConverterUInt64.lower(sompi),$0
    )
})
}
public func sompiToKaspaStringWithSuffix(sompi: UInt64, networkType: NetworkType) -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_func_sompi_to_kaspa_string_with_suffix(
        FfiConverterUInt64.lower(sompi),
        FfiConverterTypeNetworkType_lower(networkType),$0
    )
})
}
public func sompiToKaspaStringWithTrailingZeroes(sompi: UInt64) -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_func_sompi_to_kaspa_string_with_trailing_zeroes(
        FfiConverterUInt64.lower(sompi),$0
    )
})
}
public func sompiToKaspaStringWithTrailingZeroesAndSuffix(sompi: UInt64, networkType: NetworkType) -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_kaspa_wallet_core_fn_func_sompi_to_kaspa_string_with_trailing_zeroes_and_suffix(
        FfiConverterUInt64.lower(sompi),
        FfiConverterTypeNetworkType_lower(networkType),$0
    )
})
}
public func verifyMessageString(msg: String, signature: Data, pubkey: String)throws  {try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_kaspa_wallet_core_fn_func_verify_message_string(
        FfiConverterString.lower(msg),
        FfiConverterData.lower(signature),
        FfiConverterString.lower(pubkey),$0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_kaspa_wallet_core_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_kaspa_to_sompi() != 49424) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_sha256_hash() != 15093) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_sha256d_hash() != 17577) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_sign_message_string() != 64408) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_sompi_to_kaspa() != 26028) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_sompi_to_kaspa_string() != 60149) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_sompi_to_kaspa_string_with_suffix() != 24334) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_sompi_to_kaspa_string_with_trailing_zeroes() != 493) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_sompi_to_kaspa_string_with_trailing_zeroes_and_suffix() != 65013) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_func_verify_message_string() != 12037) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_method_balance_mature() != 11999) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_method_balance_outgoing() != 6140) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_method_balance_pending() != 18759) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_method_balance_to_balance_strings() != 60262) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_method_balancestrings_mature() != 31869) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_kaspa_wallet_core_checksum_method_balancestrings_pending() != 37504) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all